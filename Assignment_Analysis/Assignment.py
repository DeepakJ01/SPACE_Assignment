# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19xnpRc8pnjtN-AGH8y8zLy3KRdpzijL9
"""

import pandas as pd

# Load datasets
details_df = pd.read_csv("Details.csv")
print(details_df.head())
orders_df = pd.read_csv("Orders.csv")
print(orders_df.head())

# Merge
merged_df = pd.merge(details_df, orders_df, on="Order ID", how="inner")
print(merged_df.head())

# Convert 'Order Date'
merged_df['Order Date'] = pd.to_datetime(merged_df['Order Date'], format='%d-%m-%Y')
print(merged_df)

# Save the merged dataset to a CSV file
merged_df.to_csv('merged_output.csv', index=False)

print("Datasets merged successfully and saved to 'merged_output.csv'.")

# Compute KPIs
# 1. Total Sales
total_sales = merged_df['Amount'].sum()

# 2. Average Sales per Region
avg_sales_per_region = merged_df.groupby('State')['Amount'].mean()
# 3. Identifying High-performing and Low-performing Regions
high_performing_region = avg_sales_per_region.idxmax()  # Region with the highest average sales
low_performing_region = avg_sales_per_region.idxmin()

# 3. Customer Satisfaction Score
customer_satisfaction_score = 85  # Example static value

# Display results
print(f"Total Sales: ₹{total_sales}")
print("\nAverage Sales per Region:")
print(avg_sales_per_region)
print(f"\nCustomer Satisfaction Score: {customer_satisfaction_score}")
print(f"\nHigh-Performing Region: {high_performing_region} with Average Sales of ₹{avg_sales_per_region[high_performing_region]:.2f}")
print(f"Low-Performing Region: {low_performing_region} with Average Sales of ₹{avg_sales_per_region[low_performing_region]:.2f}")

"""Visualizations"""

import matplotlib.pyplot as plt
import seaborn as sns

# Bar Chart: Sales by Product Category
sales_by_category = merged_df.groupby('Category')['Amount'].sum()
plt.figure(figsize=(8, 5))
sales_by_category.plot(kind='bar', color='royalblue', edgecolor='black')
plt.title('Sales by Product Category')
plt.ylabel('Total Sales (₹)')
plt.xlabel('Product Category')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Sales by Product Category
sales_by_category = merged_df.groupby('Category')['Amount'].sum()

# Find the category with highest and lowest sales
highest_sales_category = sales_by_category.idxmax()
highest_sales_value = sales_by_category.max()

lowest_sales_category = sales_by_category.idxmin()
lowest_sales_value = sales_by_category.min()

# Print the results
print(f"Category with Highest Sales: {highest_sales_category} - ₹{highest_sales_value:,.0f}")
print(f"Category with Lowest Sales: {lowest_sales_category} - ₹{lowest_sales_value:,.0f}")

# Find the month with highest and lowest sales
highest_sales_month = monthly_sales.idxmax()
highest_sales_value = monthly_sales.max()

lowest_sales_month = monthly_sales.idxmin()
lowest_sales_value = monthly_sales.min()

# Convert the period to month name
highest_sales_month_name = pd.to_datetime(highest_sales_month).strftime('%B')
lowest_sales_month_name = pd.to_datetime(lowest_sales_month).strftime('%B')

# Print the results
print(f"Month with Highest Sales: {highest_sales_month_name} - ₹{highest_sales_value:,.0f}")
print(f"Month with Lowest Sales: {lowest_sales_month_name} - ₹{lowest_sales_value:,.0f}")

# Sales by Region (State)
sales_by_region = merged_df.groupby('State')['Amount'].sum()
sorted_sales = sales_by_region.sort_values(ascending=False)
colors = plt.cm.Blues(np.linspace(0.3, 1, len(sorted_sales)))
# Create the Donut chart
plt.figure(figsize=(8, 8))
plt.pie(sorted_sales, labels=sorted_sales.index, autopct='%1.1f%%', startangle=140,
        colors=colors, wedgeprops={'edgecolor': 'black'})
center_circle = plt.Circle((0, 0), 0.70, fc='white')
plt.gca().add_artist(center_circle)
plt.title('Market Share by Region')
plt.tight_layout()
plt.show()

# Find the region with highest and lowest sales
highest_sales_region = sales_by_region.idxmax()
highest_sales_value = sales_by_region.max()
highest_sales_percentage = (highest_sales_value / sales_by_region.sum()) * 100

lowest_sales_region = sales_by_region.idxmin()
lowest_sales_value = sales_by_region.min()
lowest_sales_percentage = (lowest_sales_value / sales_by_region.sum()) * 100

# Print the results
print(f"Region with Highest Market Share: {highest_sales_region} - ₹{highest_sales_value:,.0f} ({highest_sales_percentage:.1f}%)")
print(f"Region with Lowest Market Share: {lowest_sales_region} - ₹{lowest_sales_value:,.0f} ({lowest_sales_percentage:.1f}%)")

# Map: Sales Distribution by Geography
sales_by_city = merged_df.groupby(['City', 'State'])['Amount'].sum().reset_index()
sales_by_city.columns = ['City', 'State', 'Total Sales']

plt.figure(figsize=(12, 8))
sns.scatterplot(
    data=sales_by_city,
    x='City',
    y='Total Sales',
    size='Total Sales',
    sizes=(100, 1000),
    hue='State',
    legend=False,
    palette='viridis'
)
plt.title('Sales Distribution by Geography')
plt.xlabel('City')
plt.ylabel('Total Sales (₹)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Find the city with the highest and lowest total sales
highest_sales_city = sales_by_city.loc[sales_by_city['Total Sales'].idxmax()]
lowest_sales_city = sales_by_city.loc[sales_by_city['Total Sales'].idxmin()]
# Output the results
print(f"City with Highest Sales: {highest_sales_city['City']} in {highest_sales_city['State']} - ₹{highest_sales_city['Total Sales']:.0f}")
print(f"City with Lowest Sales: {lowest_sales_city['City']} in {lowest_sales_city['State']} - ₹{lowest_sales_city['Total Sales']:.0f}")

import plotly.express as px

# Load the dataset
data = pd.read_csv('merged_output.csv')

# Convert 'Order Date'
data['Order Date'] = pd.to_datetime(data['Order Date'], format='%d-%m-%Y')
fig = px.scatter(
    data,
    x='Order Date',
    y='Amount',
    color='Category',
    hover_data=['Sub-Category', 'City', 'State'],
    title='Sales Data with Filters',
)

fig.update_layout(
    xaxis_title='Order Date',
    yaxis_title='Amount',
    updatemenus=[
        {
            'buttons': [
                {
                    'label': 'All Dates',
                    'method': 'relayout',
                    'args': ['xaxis.range', [data['Order Date'].min(), data['Order Date'].max()]]
                },
                {
                    'label': 'Last 6 Months',
                    'method': 'relayout',
                    'args': ['xaxis.range', [data['Order Date'].max() - pd.DateOffset(months=6), data['Order Date'].max()]]
                },
            ],
            'direction': 'down',
            'showactive': True,
        }
    ]
)

fig.show()

data['Order Date'] = pd.to_datetime(data['Order Date'], format='%d-%m-%Y')

# Key insights:
# 1. Total sales and profit by category
category_summary = data.groupby('Category').agg({'Amount': 'sum', 'Profit': 'sum'}).reset_index()

# 2. Top-performing regions (states) by total sales
state_summary = data.groupby('State').agg({'Amount': 'sum'}).sort_values(by='Amount', ascending=False).head(5).reset_index()

# 3. Sales trend over time
sales_trend = data.groupby(data['Order Date'].dt.to_period('M')).agg({'Amount': 'sum'}).reset_index()

# Displaying the insights
print("Category Summary:")
print(category_summary)
print("\
Top 5 States by Sales:")
print(state_summary)
print("\
Sales Trend:")
print(sales_trend.head())

"""#Insights and Analysis
###Total Sales:Monitor overall performance and growth.
###Average Sales per Region: Identify high-performing regions and areas needing improvement.
###Customer Satisfaction Score: Track customer feedback and satisfaction levels.
###Sales by Product Category: Determine which product categories are driving sales.
###Monthly Sales Trends: Analyze seasonal trends and sales patterns.
###Market Share by Region: Understand your market position in different regions.
###Sales Distribution by Geography: Visualize geographic sales performance and identify potential markets.

"""

# Load the datasets
details_df = pd.read_csv("Details.csv")
orders_df = pd.read_csv("Orders.csv")
merged_df = pd.merge(details_df, orders_df, on="Order ID", how="inner")
merged_df['Order Date'] = pd.to_datetime(merged_df['Order Date'], format='%d-%m-%Y')

# 1. Total Sales
total_sales = merged_df['Amount'].sum()
print(f"Total Sales: ₹{total_sales}")

# 2. Average Sales per Region
avg_sales_per_region = merged_df.groupby('State')['Amount'].mean()
print("\nAverage Sales per Region:")
print(avg_sales_per_region)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('merged_output.csv')

region_performance = df.groupby('State').agg({
    'Amount': ['mean', 'count', 'sum']
}).round(2)

region_performance.columns = ['Avg_Sales', 'Number_of_Orders', 'Total_Sales']
region_performance = region_performance.sort_values('Avg_Sales', ascending=False)

# Create visualization
plt.figure(figsize=(12, 6))
sns.barplot(data=region_performance.reset_index(), x='State', y='Avg_Sales')
plt.xticks(rotation=45, ha='right')
plt.title('Average Sales by State')
plt.xlabel('State')
plt.ylabel('Average Sales (INR)')
plt.tight_layout()
plt.show()

print("\
Top 5 States by Average Sales:")
print(region_performance.head().round(2))

# 3. Customer Satisfaction Score (Placeholder)
customer_satisfaction_score = 85
print(f"\nCustomer Satisfaction Score: {customer_satisfaction_score}")

low_performance = region_performance.tail(5)

plt.figure(figsize=(12, 6))
sns.barplot(data=low_performance.reset_index(), x='State', y='Avg_Sales', palette='coolwarm')
plt.xticks(rotation=45, ha='right')
plt.title('Underperforming States by Average Sales')
plt.xlabel('State')
plt.ylabel('Average Sales (INR)')
plt.tight_layout()
plt.show()

print("\
Bottom 5 States by Average Sales:")
print(low_performance.round(2))

category_sales = df.groupby('Category').agg({'Amount': 'sum'}).sort_values('Amount', ascending=False)

category_sales = category_sales.reset_index()

plt.figure(figsize=(10, 6))
sns.barplot(data=category_sales, x='Category', y='Amount', palette='viridis')
plt.title('Total Sales by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Sales (INR)')
plt.tight_layout()
plt.show()

print("\
Sales by Product Category:")
print(category_sales)

df['Order Date'] = pd.to_datetime(df['Order Date'], format='%d-%m-%Y')

# Extract month and year
df['Month_Year'] = df['Order Date'].dt.to_period('M')

# Calculate monthly sales
monthly_sales = df.groupby('Month_Year').agg({
    'Amount': 'sum',
    'Order ID': 'count'
}).reset_index()

monthly_sales['Month_Year'] = monthly_sales['Month_Year'].astype(str)

# Create visualization
plt.figure(figsize=(12, 6))
plt.plot(monthly_sales['Month_Year'], monthly_sales['Amount'], marker='o')
plt.xticks(rotation=45, ha='right')
plt.title('Monthly Sales Trend')
plt.xlabel('Month')
plt.ylabel('Total Sales (INR)')
plt.grid(True)
plt.tight_layout()
plt.show()

print("\
Peak Sales Months:")
print(monthly_sales.nlargest(3, 'Amount')[['Month_Year', 'Amount']])

# Analyzing sales by region (State)
state_analysis = df.groupby('State').agg({
    'Amount': 'sum',
    'Order ID': 'count'
}).reset_index()

# Calculate market share percentage
state_analysis['Market_Share'] = (state_analysis['Amount'] / state_analysis['Amount'].sum()) * 100

# Sort by market share
state_analysis = state_analysis.sort_values('Market_Share', ascending=False)

# Create pie chart for top states
plt.figure(figsize=(12, 8))
plt.pie(state_analysis['Market_Share'][:5],
        labels=state_analysis['State'][:5],
        autopct='%1.1f%%',
        startangle=90)
plt.title('Top 5 States by Market Share')
plt.axis('equal')
plt.show()

print("\
Detailed State Analysis:")
print(state_analysis[['State', 'Amount', 'Market_Share']].head())

import seaborn as sns
import matplotlib.pyplot as plt

# Create a bar plot with state names
plt.figure(figsize=(15, 8))
sns.barplot(data=geo_analysis.sort_values('Amount', ascending=False),
            x='State',
            y='Amount')
plt.xticks(rotation=45, ha='right')
plt.title('Sales Distribution Across All States')
plt.xlabel('State')
plt.ylabel('Total Sales Amount (INR)')
plt.tight_layout()
plt.show()

# Print detailed metrics for all states
print("\
Complete State-wise Performance:")
print(geo_analysis.sort_values('Amount', ascending=False)[['State', 'Amount', 'Order ID', 'Avg_Order_Value']])